var tipuesearch = {"pages": [{'title': 'About', 'text': '課程名稱: 協同產品設計實習 - Collaborative Product Design Practice \n 學員作業網站: https://mdecd2025.github.io/hw-Yu-Fang-Hong/ \n 學員作業倉儲: https://github.com/mdecd2025/hw-Yu-Fang-Hong \n \n 課程代號: cd2025 \n Teams 線上教學: \n 以 "學號@nfu.edu.tw" 登入 \xa0 https://login.microsoftonline.com/ \xa0 Office 365 \n Teams 團隊代碼:\xa0 p5z4eku \n \n 課程評分: \n Homework (30%) - 每週至少提交兩次與課程進度有關的內容, 完成後填回自評表單 \n Exam (40%) - 建立包含操作流程影片、心得以及提供檔案下載的網頁後填回自評表單 \n Final Report (30%) - 利用網頁內容進行簡報並提交 pdf 格式書面報告, 完成後填回自評表單 \n', 'tags': '', 'url': 'About.html'}, {'title': 'Tasks', 'text': '', 'tags': '', 'url': 'Tasks.html'}, {'title': 'w1', 'text': '建立可攜環境，維護個人網站 \n \n acp setting \n \n', 'tags': '', 'url': 'w1.html'}, {'title': 'task2', 'text': 'SSH推送設定 \n \n', 'tags': '', 'url': 'task2.html'}, {'title': 'w3', 'text': '列出 2a 學員作業網站與倉儲連結 \n 列出 2b 學員作業網站與倉儲連結 \n 列出 2a 分組網站與倉儲連結 \n 列出 2b 分組網站與倉儲連結 \n \n 請列出各班目前尚未納入分組的學員名單 \n \n', 'tags': '', 'url': 'w3.html'}, {'title': 'w4', 'text': '將電腦設為所份配的固定 IPv6 \n \n', 'tags': '', 'url': 'w4.html'}, {'title': 'w14', 'text': '使用 ipv6 個人序號開啟近態編輯網站 \n', 'tags': '', 'url': 'w14.html'}, {'title': 'task3', 'text': '使用 Solvespace 繪製平面四連桿系統零組件 \n \n link1.slvs \n link2.slvs \n link3.slvs \n shaft1.slvs \n shaft2.slvs \n base.slvs \n fourbar_linkage_design.slvs \n 使用 Solvespace 組合平面四連桿系統零組件 \n', 'tags': '', 'url': 'task3.html'}, {'title': 'task4', 'text': '利用老師提供的Tutorials熟悉Webots，並成功做出四連桿機構 \n \n', 'tags': '', 'url': 'task4.html'}, {'title': 'w5', 'text': 'Tutorial1 \n 此影片e-puck未成功匯入程式碼，下個影片會匯入 \n \n 將程式匯入後，機器人行動 \n \n my_first_simulation.wbt \n my_first_simulation.wbproj \n my_first_simulation.jpg \n epuck_controller.c \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': 'Tutorial 2\xa0 \n 修改地板及運用 兩顆球及四面牆，並使用 shape\xa0 節點實現\xa0 DEF-USE 機制 \n \n obstacles.wbt \n obstacles.jpg', 'tags': '', 'url': 'w6.html'}, {'title': 'Homework', 'text': '作業 (30%) \n HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n part1: \n 請各學員在 USB 隨身碟或個人電腦上完成 cd2025 課程所需的可攜系統配置: \n 下載  portable_wcm2025.7z  (330MB, 解開壓縮後 1.4GB) \n Webots_2025a.7z  (1.5 GB, 解開後約為 2.9GB, 可單獨運作) \n Webots_2025a_web.7z  (171 MB, 解開壓縮後約為 1GB, 必須連網運作) \n Blender4.2.7z \n part2: \n 請各學員完成可攜程式系統配置後, 利用 Webots R2025a 中寬度與高度都為 0.1m 的 box 物件建立一個簡單的平面四連桿機構模擬場景. \n base (基座) 長度 1m, link1 長度 0.4m, link2 長度 0.6m, link3 長度 0.9m, 各轉軸均為 HingeJoint, joint1 旋轉速度設定為 1radian/sec. \n part3: \n 模擬場景啟動後, 按下 s 鍵機構開始作動, 按下 p 鍵後機構暫停. \n 參考資料: \n cd2025_hw1_demo.7z \n HW2 (5%):  建立由 CAD 繪製零件組成的平面四連桿機構 Webots 模擬場景 \n 各學員請利用 CAD 系統依據 HW1 的連桿尺寸與運動方式, 配置適當大小的旋轉軸以及基座後, 利用 Webots R2025a 完成一個簡單的平面四連桿機構模擬場景. \n 參考資料: \n fourbar_slvs.7z \n HW3 (20%): 建立 Webots 桌上籃球遊戲機模擬系統 \n 請各分組利用CAD 系統建立一個能在電腦桌 (1600W X 700D X 740H mm) 上運作的投籃機構 ( 參考影片 )後, 導入 Webots R2025a 套件, 建立一個能由使用者透過鍵盤按鍵操作, 且具備計分板的籃球遊戲機模擬系統. \n 參考資料: \n 參考資料: \n fourbar_ball_throwing_linkage.slvs \n sixbar_ball_throwing_linkage.slvs \n \n', 'tags': '', 'url': 'Homework.html'}, {'title': 'HW1', 'text': 'HW1 (5%):  建立由 Box 組成的平面四連桿機構 Webots 模擬場景 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 HW1 - 學員學號 \n 根據老師提供的 步驟 完成 HW1 ，第一步影片為  Step1 - Step6 \xa0，在  Step4  中，在確定 t = 0 儲存後， 利用  SciTE  開啟  Y:\\tmp\\hw1\\worlds\\hw1.wbt \xa0，此步驟我還不了解，便在深入了解後，新增到下一部影片中。 \n \n 後來了解了利用\xa0 SciTE 打開場 hw1.wbt 檔案，第二部影片為  Step6 - Step9  ，在下一部影片會放上作業全部完成的步驟。 \n \n ________________________________________________________________________________ \n w14 將其餘的 links 補上並擺好位置，之後會補上步驟影片 \n \n 剛開始模擬作動時，發生錯誤導致只有紅色連趕在轉動。 \n \n 後來發現沒有設置物理性質導致其餘連桿無法連動，且當時作動邊界未設置好。 \n \n hw1.7z', 'tags': '', 'url': 'HW1.html'}, {'title': 'HW2', 'text': '先利用 solvespace 將四連桿機構畫出來 (第一步影片) ，將其零件組合起來(第二部影片)，接下來再 宣告該轉軸所在位置 以及旋轉軸向量即可(第三部影片)。後續會再將影片加上字幕，並完成最後的模擬。 \n 使用 Solvespace 繪製平面四連桿系統零組件 \n \n link1.slvs \n link2.slvs \n link3.slvs \n shaft1.slvs \n shaft2.slvs \n base.slvs \n fourbar_linkage_design.slvs \n 使用 Solvespace 組合平面四連桿系統零組件 \n \n hw2.slvs \n hw2.stl', 'tags': '', 'url': 'HW2.html'}, {'title': 'HW3', 'text': '\n 目前只完成利用CAD繪製投籃機作動，接下來會將其匯入webots嘗試模擬。 \n 以下為\xa0 CAD繪製投籃機做動 \n \n 投籃機作動.slvs', 'tags': '', 'url': 'HW3.html'}, {'title': 'Midterm', 'text': '本課程所繳交的期中成績為學員自評之學習期望成績. \n 期中考週的自評期望成績繳交流程: \n \n 整理先前所完成的各週的進度、作業網頁內容以及心得 \n 拍攝期中自評影片, 上傳至 Youtube 後, 以" 國立虎尾科技大學 - 機械設計工程系 - cd2025 期中自評- 學員學號 "為影片標題後嵌入本頁面中 \n 回填期中自評表單 \n 上傳學員期中成績 \n \n 各週進度: \n \n 各週網頁內容: \n w1:利用https建立可攜，並設定acp推送設置 \n w2:未成功完成task1就未上傳 \n w3:列出各班目前未納入分組的學員，不過後來未成功寫出程式 \n w4:利用SSH推送設定，以及ipv6的設置 \n w5:試著做出平面四連桿機構，最後並未成功能夠運動 \n w6:未推送 \n w7:放連假，未推送 \n w8:新增task3，使用solvespace繪製平面四連桿系統零件圖，使用webots練習Tutorial1，最後在無人機的部分卡關了 \n 期中心得:有些週數沒按時推送，將在手機設置提醒確保自己能在期中週後保持每週推送；webots方面還需多加強，希望在期中週可以成功完成 Tutorial1練習，並做出HW1 \n 期中自評影片: \n \n \n', 'tags': '', 'url': 'Midterm.html'}, {'title': 'Exam', 'text': 'Exam1 (10%): 建立 Webots 基本物件模擬場景 \n 各學員利用 Webots R2025a 套件中的 Shape 物件, 隨堂建立指定的機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam2 (10%): 利用 CAD 零組件建立模擬場景\xa0 \n 各學員利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. \n Exam3 (20%): Webots 機電模擬場景的協同設計 \n 各分組利用 CAD (Solvespace 與 NX2312), 隨堂建立指定的系統模型零組件後, 導入 Webots R2025a 後, 建立機電系統模擬場景, 並利用 Python 程式進行互動控制. 過程中各學員必須採同步協同模式, 維護從 Github Classroom 取得的分組協同倉儲以及網站. \n 協同分組方式: \n \n 分配學員負責利用 Solvespace 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 NX2312 建立系統零組件, 過程中必須將所建構之零組件檔案與繪圖過程影片上傳至分組網頁. \n 分配學員負責利用 Webots 建立機電系統模擬場景, 並利用 Python 程式進行控制, 過程中必須將建構過程拍成帶有說明字幕的影片上傳至分組網頁. \n \n', 'tags': '', 'url': 'Exam.html'}, {'title': 'Exam1', 'text': 'exam1.7z \n 錯誤影片 ：未先建立 Robot 點 \n \n 完成版 ：將HW1的另存並新建一根短桿在 link2 中，並將 base 隱藏，但影片未拍到如何影藏，將在下方以照片方式說明。 \n \n 以下為將黃色 base 桿件影藏的步驟。 \n \n', 'tags': '', 'url': 'Exam1.html'}, {'title': 'Exam2', 'text': '影片一  ：exam2 零件繪製以及組合 \n \n', 'tags': '', 'url': 'Exam2.html'}, {'title': 'Exam3', 'text': 'Exam3 (20%): Webots 機電模擬場景的協同設計 \n 操作影片標題: 國立虎尾科技大學 - 機械設計工程系 - cd2025 Exam3 - 學員學號 \n ___________________________________________________________________________________ \n 3-2 七段顯示器 ( exam3-2.7z ) \n \n', 'tags': '', 'url': 'Exam3.html'}, {'title': 'Final', 'text': '期末協同專案執行過程影片、簡報與 PDf 報告檔案 (六人一組) (30%) \n 題目:  Webots 動態投籃模擬系統的協同設計 \n 說明:  \n 籃框架被配置在一定範圍內, 可隨機慢速前進、後退及左右擺動, 投籃機構系統帶有一定數量的籃球, 被配置在可自由移動的輪車上. \n 操作者可利用鍵盤特定按鍵控制投籃輪車的移動並發射投籃, 每投出一球後系統透過記分板進行計分, 並由送球機構進行補球或移動輪車取球, 遊戲可進行至全部數量籃球投完為止. \n 請將期末協同專案執行過程、內容與心得, 製作成影片，配合字幕上傳至 Youtube 後嵌入各階段的期末報告頁面中. \n 影片標題:  國立虎尾科技大學 - 機械設計工程系 - cd2025 期末報告 - 學員學號 - 各階段影片主題 \n _______________________________________________________________________________________________ \n pdf： final.pdf \n 根據老師提供的專案進行說明。 \n 下面這張圖為七段顯示器以及一個矩形競技場。 \n \n 此為上面七段顯示器的python程式碼 \n from controller import Supervisor\n\nclass SevenSegmentController:\n    def __init__(self, supervisor, color_on, color_off):\n        self.supervisor = supervisor\n\n        # Define the segments for each digit\n        self.digit_segments = [\n            [f"a1", f"b1", f"c1", f"d1", f"e1", f"f1", f"g1"],  # Units\n            [f"a2", f"b2", f"c2", f"d2", f"e2", f"f2", f"g2"],  # Tens\n            [f"a3", f"b3", f"c3", f"d3", f"e3", f"f3", f"g3"]   # Hundreds\n        ]\n\n        # Segment patterns for digits 0-9\n        self.segment_patterns = {\n            0: [1, 1, 1, 1, 1, 1, 0],\n            1: [0, 1, 1, 0, 0, 0, 0],\n            2: [1, 1, 0, 1, 1, 0, 1],\n            3: [1, 1, 1, 1, 0, 0, 1],\n            4: [0, 1, 1, 0, 0, 1, 1],\n            5: [1, 0, 1, 1, 0, 1, 1],\n            6: [1, 0, 1, 1, 1, 1, 1],\n            7: [1, 1, 1, 0, 0, 0, 0],\n            8: [1, 1, 1, 1, 1, 1, 1],\n            9: [1, 1, 1, 1, 0, 1, 1]\n        }\n\n        # Colors for on and off states\n        self.color_on = color_on  # Bright green\n        self.color_off = color_off  # Black\n\n        # Retrieve material nodes for each segment\n        self.segment_nodes = []\n        for digit in self.digit_segments:\n            digit_nodes = []\n            for segment in digit:\n                node = self.supervisor.getFromDef(segment)\n                if node is None:\n                    print(f"Error: Node with DEF name \'{segment}\' not found!")\n                    exit()\n                digit_nodes.append(node.getField("diffuseColor"))\n            self.segment_nodes.append(digit_nodes)\n\n    def set_digit(self, digit_index, value):\n        """Set the digit at the given index (0 for units, 1 for tens, 2 for hundreds) to the given value (0-9)."""\n        pattern = self.segment_patterns[value]\n        for i, state in enumerate(pattern):\n            color = self.color_on if state else self.color_off\n            self.segment_nodes[digit_index][i].setSFVec3f(color)\n\n    def display_number(self, number):\n        """Display a number (0-999) using the three 7-segment displays."""\n        if not (0 <= number <= 999):\n            print("Error: Number out of range (must be 0-999)")\n            return\n\n        # Break the number into hundreds, tens, and units\n        hundreds = number // 100\n        tens = (number % 100) // 10\n        units = number % 10\n\n        # Update the displays\n        self.set_digit(2, hundreds)\n        self.set_digit(1, tens)\n        self.set_digit(0, units)\n\n\n# Main program\nif __name__ == "__main__":\n    # Create a Supervisor instance\n    supervisor = Supervisor()\n\n    # Define colors\n    color_on = [0.0, 1.0, 0.0]  # Bright green\n    color_off = [0.0, 0.0, 0.0]  # Black\n\n    # Create an instance of the SevenSegmentController\n    controller = SevenSegmentController(supervisor, color_on, color_off)\n\n    # Run the simulation loop\n    timestep = int(supervisor.getBasicTimeStep())\n    while supervisor.step(timestep) != -1:\n        try:\n            # Get user input for the number to display\n            number = 123\n            controller.display_number(number)\n        except ValueError:\n            print("Invalid input. Please enter an integer between 0 and 999.") \n \n self.digit_segments  中的 a1 、 b1 、c1 ...； a2 、 b2 、c2 ...； a3 、 b3 、c3 ...，分別為個、十、百位數的 DEF 名稱，共有 7 段所以英文字母到g。 \n self.segment_patterns  則是定義了數字  0~9  每個數字的七段開啟狀態（ 1  表示亮， 0  表示滅）。 \n self.color_on  中的 =color_on 為數字顏色明稱 (on 為綠色， off 為黑色) \n segment_nodes  中，透過  Supervisor ，根據 segment 的  DEF  名稱（如  "a1" ），取得對應的 Material 節點，並從這個 Material 節點中，取出  diffuseColor  欄位（代表顏色），回傳一個可用來  setSFVec3f()  操作的 field 物件。 \n set_digit()  中，將利用 setSFVec3f() 控制顯示器數值。 \n _________________________________________________________________________________________ \n \n 此為矩形競技場。 \n \n 建立 Robot 取名為 robot ，並調整初始位置 translation o, -0.59, 0.26 ，Add new pose 運用原先位置。 \n \n 在 pose 中的子目錄新增一個七段顯示器的 pose ，並設定這顯示器的初始位置在個位數的數值左下方。子目錄下pose 為七段顯示器中的背板， first Group 包含個位數的數值 a1~g1 ， second Pose 為十位數的位置，包含 second Group ，其裡面數值\xa0 a2~g2，third pose 就如 second pose 一樣。 \n 七段顯示器檔案： three_digit_counter_w16.7z \n _________________________________________________________________________________________ \n \n 此為投籃機與籃框在一個地板上進行投籃。 \n \n add new floor 改名 floor ，其中的  tileSize  是控制紋路大小。 \n youbot Robot  為投籃機機器人 \n supervisor  為控制球的機器人 \n stand  為籃框機器人 \n \n youbot Robot 中的子目錄新增四顆輪子、底板以及投籃機原型。 \n 其中  BodyMesh  為基底自走車的外型，  my proto  為投籃機。 \n \n 新增一個輪子的外型 (WeelMesh) ，再新增多個 Pose 使輪子能轉動 \n \xa0 \xa0 \xa0 \xa0 \n 共有 5 個 Pose ，繞著輪子轉一圈。 \n', 'tags': '', 'url': 'Final.html'}, {'title': 'Brython', 'text': '1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};